@page "/{penNameUrl}/{titleUrl?}"
@model BookSite.BookModel
@{ var listings = new List<BookSite.Models.Listing>(); }
@{Model.Book.Editions.FirstOrDefault()?.Formats.ForEach(f => f.Listings.ForEach(l => listings.Add(l)));}
@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>@Model.Book.Title</title>
    <link href="~/css/book.css" rel="stylesheet" />
    <style>
        .book3d > div {
            position: absolute;
        }

        #floatingBook {
            position: fixed;
        }

        .book3d {
            /*box-shadow: darkgray 0 10px 20px;*/
        }

        .blurbQuote {
            font-weight: bold;
            text-align: center;
        }

        .blurbSource {
            font-style: italic;
            text-align: right;
            margin-bottom: 1em;
        }

        #buyLinks {
            position: fixed;
            bottom: 50vh;
            right: 0;
            display: flex;
            flex-direction: column;
            transition: .5s;
        }

        #buyLinks.showing {
            right: -50vw;
            transition: .5s;
        }

            #buyLinks button {
                position: relative;
                text-align: left;
                font-size: 25px;
                height: 50px;
                border-radius: 25px 0 0 25px;
                padding-left: 60px;
                margin: 12.5px 0;
                background-size: contain;
                background-position: left;
                background-repeat: no-repeat;
                left: calc(100% - 60px);
                box-shadow: rgba(0, 0, 0, .5) -5px 5px 5px;
                border-right: none;
            }

                #buyLinks button:hover {
                    left: 0;
                    transition: .5s;
                }

                #buyLinks button:focus {
                    outline: none;
                }

        #buy a {
            display: flex;
            background-position: left;
            background-size: 1em;
            background-repeat: no-repeat;
            padding-left: 1.5em;
            margin: 10px 0;
            box-shadow: rgba(0, 0, 0, .5) -5px 5px 5px;
            background-color: #EEE;
        }
    </style>
    <script src="https://polyfill.io/v3/polyfill.min.js?features=scrollIntoView"></script>
</head>
<body>

    <div id="book-app">
        <nav>
            <div class="title">
                <span v-on:click="scrollTo('#main')">@Model.Book.Title</span>
                @*<br />
                    <input :style="`width: 100%; margin-top: 40px;`" type="range" min="30" max="390" value="" v-model="yRotation" />
                    <input :style="`width: 100%; margin-top: 10px;`" type="range" min="-30" max="30" value="" v-model="xRotation" />
                    <input :style="`width: 100%; margin-top: 10px;`" type="range" min="0" max="360" value="" v-model="zRotation" />*@
            </div>
            <div id="section-nav">
                @foreach (var sec in Model.Book.Sections.Where(s => s.NavId != "main"))
                {
                    var minSectionOrder = Model.Book.Sections.Where(s => s.NavId != "main").Min(s => s.Order);
                    if (minSectionOrder == sec.Order && minSectionOrder > Model.Book.BlurbOrder)
                    {
                        <span v-on:click="scrollTo('#blurbs')">Blurbs</span>
                    }
                    <span v-on:click="scrollTo('#@sec.NavId.Replace(" ", "")')">@sec.Name</span>
                    if (Model.Book.BlurbOrder == sec.Order + 1)
                    {
                        <span v-on:click="scrollTo('#blurbs')">Blurbs</span>
                    }
                    if (Model.Book.BuyOrder == sec.Order + 1 || (sec == Model.Book.Sections.OrderBy(s => s.Order).Last() && Model.Book.BuyOrder == 0))
                    {
                        <span v-on:click="scrollTo('#buy')">Buy Now</span>
                    }
                }
                <span v-on:click="scrollTo('#alsoby')">Also By</span>
            </div>
        </nav>
        <div id="floatingBook" :style="`height: ${heightInPixels}
    px; top: ${bookTopMargin}px;left:${
    bookLeftMargin}px`">
            <div :style="bookContainerStyle(cover)">
                <div class="book3d" :style="book3dStyle(cover)">
                    <div class="front" :style="book3dCoverStyle(cover)"></div>
                    <div class="back" :style="book3dBackStyle(cover)"></div>
                    <div :style="book3dEdgeStyle(cover)"></div>
                    <div :style="book3dSpineStyle(cover)"></div>
                    <div :style="book3dTopStyle(cover)"></div>
                    <div :style="book3dBottomStyle(cover)"></div>
                </div>
            </div>
        </div>
        @foreach (var sec in Model.Book.Sections.OrderBy(s => s.Order))
        {
            <section id="@sec.NavId.Replace(" ", "")" style="background-color: @sec.BackgroundColor; text-align: left; background-image: url(/api/books/sectionbackground/@sec.Id); background-size: cover; color: @sec.Color; text-shadow: -.1vmax .1vmax .2vmax @sec.BackgroundColor;">
                <div class="content">@Html.Raw(sec.Content)</div>
            </section>
            if (Model.Book.BlurbOrder == sec.Order + 1)
            {
                // display Blurb Section here
                <section id="blurbs" style="_background-color: @sec.BackgroundColor; text-align: left; _background-image: url(/api/books/sectionbackground/@sec.Id); _background-size: cover; _color: @sec.Color; _text-shadow: -.1vmax .1vmax .2vmax @sec.BackgroundColor;">
                    <div class="content">
                        <h2>BLURBS</h2>
                        @foreach (var blurb in Model.Book.Blurbs.OrderBy(b => b.Order))
                        {
                            <div class="blurbQuote">"@blurb.Quote"</div>
                            <div class="blurbSource">–@blurb.Source</div>
                        }
                    </div>
                </section>
            }
            if (Model.Book.BuyOrder == sec.Order + 1 || (sec == Model.Book.Sections.OrderBy(s => s.Order).Last() && Model.Book.BuyOrder == 0))
            {
                // display Blurb Section here
                <section id="buy" style="_background-color: @sec.BackgroundColor; text-align: left; _background-image: url(/api/books/sectionbackground/@sec.Id); _background-size: cover; _color: @sec.Color; _text-shadow: -.1vmax .1vmax .2vmax @sec.BackgroundColor;">
                    <div class="content">
                        <h2>Buy Now</h2>
                        @foreach (var listing in listings)
                        {
                            <a href="@listing.Url" style="background-image: url(/images/@listing.Vendor.ImageFile);">@listing.Vendor.Name - @listing.Format.Type</a>
                        }
                    </div>
                </section>
            }
        }

        // display Also Buy Section here
        <section id="alsoby" style="background-color: #333; text-align: left; _background-image: url(/api/books/sectionbackground/sec.Id); _background-size: cover; color: white; _text-shadow: -.1vmax .1vmax .2vmax black;">
            <div class="content">
                <h2>Also By</h2>
                @foreach (var author in Model.Book.Authors)
                {
                    <h3>@author.Author.PenName</h3>
                    @foreach (var book in author.Author.Books)
                    {
                        if (book.Book.Id != Model.Book.Id)
                        {
                        <h4>@book.Book.Title</h4>
                            }
                        }
                    }
            </div>
        </section>

        <aside id="buyLinks" :class="{ showing: showingBuyNow }">
            @foreach (BookSite.Models.Listing listing in listings)
            {
                <button v-on:click="scrollTo('#buy')" style="background-image: url(/images/@listing.Vendor.ImageFile);">@listing.Vendor.Name - @listing.Format.Type</button>

            }
        </aside>

    </div>


    <script src="~/lib/vue/vue.js"></script>
    <script>

        const bookApp = new Vue({
            el: "#book-app",
            data: {
                bookId: @Model.Book.Id,
                @{ var cover = Model.Book.Covers.SingleOrDefault(c => c.Type == Models.CoverType.Full); }
                cover: {
                    width: @cover.Width,
                    height: @cover.Height,
                    spineWidth:@cover.SpineWidth
                },
                heightInPixels: 900,
                yRotation: 30,
                //xRotation: -30,
                zRotation: 0,
                scrollY: 0,
                viewPortHeight: 0,
                bookLeftMargin: 0,
                bookTopMargin: 0,
                displayMode: "desktop",
                showingBuyNow: false
            },
            created() {
                console.log("Add Scroll Event")
                window.addEventListener('scroll', this.scrolled.bind(this));
                window.addEventListener('resize', this.resize.bind(this));
            },
            destroyed() {
                console.log("Remove Scroll Event")
                window.removeEventListener('scroll', this.scrolled);
                window.removeEventListener('resize', this.resize);
            },
            mounted() {
                this.resize();
            },
            computed: {
                xRotation() {
                    if (window.scrollY <= this.viewPortHeight) {
                        return 30 - (this.yRotation / 2 - 15);
                    }
                    if (window.scrollY > this.viewPortHeight && window.scrollY <= this.viewPortHeight * 2) {
                        return ((this.yRotation - 150) / 6) - 30;
                    }
                    if (window.scrollY > this.viewPortHeight * 2) {
                        return 0;
                    }
                }

            },
            methods: {
                scrollTo(selector) {
                    document.querySelector(selector).scrollIntoView({
                        behavior: 'smooth'
                    });
                },
                resize() {
                    this.viewPortHeight = window.innerHeight;
                    let widthInPixels;
                    let maxHeight = window.innerHeight - 50;
                    if (this.viewPortHeight <= window.innerWidth || window.innerWidth > 575) {
                        let bookHeight = this.viewPortHeight * .8;
                        this.heightInPixels = bookHeight > 900 ? 900 : bookHeight;
                        widthInPixels = (this.cover.width * ((100 - this.cover.spineWidth) / 200)) * (this.heightInPixels / this.cover.height);
                        let ratio = this.heightInPixels / widthInPixels;
                        if (widthInPixels > window.innerWidth * .8 / 2) {
                            console.log("TOO WIDE")
                            widthInPixels = window.innerWidth * .8 / 2;
                            this.heightInPixels = widthInPixels * ratio;
                        }
                        this.bookLeftMargin = ((window.innerWidth / 2) - widthInPixels) / 2;
                        this.bookTopMargin = (window.innerHeight - this.heightInPixels) / 2;
                        this.displayMode = "desktop";

                    } else {
                        // phone mode
                        this.heightInPixels = (this.viewPortHeight / 2) * .8;
                        widthInPixels = (this.cover.width * ((100 - this.cover.spineWidth) / 200)) * (this.heightInPixels / this.cover.height);
                        this.bookLeftMargin = (window.innerWidth - widthInPixels) / 2;
                        this.bookTopMargin = 50;
                        this.displayMode = "phone";
                        maxHeight = window.innerHeight / 2;
                    }
                    console.log("VIEWPORT", window.innerWidth, window.innerHeight)
                    console.log("BOOK", widthInPixels, this.heightInPixels)

                    // Check size of
                    let sections = document.querySelectorAll("section");
                    console.log(sections)
                    for (let i = 0; i < sections.length; i++) {
                        let content = sections[i].querySelector(".content");
                        if (content) {
                            let currentRemSize = 1;
                            content.style["font-size"] = currentRemSize + "rem";
                            console.log(window.innerHeight, content.innerHeight, content.clientHeight)
                            while (content.clientHeight > maxHeight) {
                                console.log("TOO TALL")
                                currentRemSize = currentRemSize * .9;
                                content.style["font-size"] = currentRemSize + "rem";
                            }
                            while (content.clientHeight < maxHeight / 2) {
                                console.log("TOO short")
                                currentRemSize = currentRemSize * 1.1;
                                content.style["font-size"] = currentRemSize + "rem";
                            }
                            if (window.innerWidth / window.innerHeight < 1.4 && this.displayMode == "desktop") {
                                let paddingAdujst = (1.5 - (window.innerWidth / window.innerHeight)) * 50 / 5;
                                if (paddingAdujst > 5) { paddingAdujst = 5; }
                                console.log("Padding Adjust", paddingAdujst);
                                content.style["padding-right"] = 10 - paddingAdujst + "vw";
                                content.style["padding-left"] = paddingAdujst + "vw";
                            } else {
                                content.style["padding-right"] = null;
                                content.style["padding-left"] = null;
                            }
                        }
                    }
                },
                scrolled() {
                    let yRotation = 30;
                    console.log("SCROLLING", window.scrollY, this.viewPortHeight);

                    const element = document.querySelector("#buy .content");
                    const rect = element.getBoundingClientRect();
                    if ((rect.top >= 0) && (rect.bottom <= (window.innerHeight || document.documentElement.clientHeight))) {
                        this.showingBuyNow = true;
                    } else {
                        this.showingBuyNow = false;
                    };
                    console.log("RECT", rect.top, rect.bottom, 0, (window.innerHeight || document.documentElement.clientHeight), this.showingBuyNow)

                    this.scrollY = window.scrollY;
                    if (window.scrollY <= this.viewPortHeight) {
                        yRotation = 30 + (window.scrollY * 120 / this.viewPortHeight);
                        this.yRotation = yRotation;
                    }
                    if (window.scrollY > this.viewPortHeight && window.scrollY <= this.viewPortHeight * 2) {
                        //yRotation = 150 - (30 + (window.scrollY * 120 / this.viewPortHeight) - 150);
                        yRotation = 150 + (((window.scrollY - this.viewPortHeight) / this.viewPortHeight) * 180);
                        this.yRotation = yRotation;
                    }
                    if (window.scrollY > this.viewPortHeight * 2) {
                        yRotation = 330;
                    }



                },
                sizes(cover, heightInPixels) {
                    let height = heightInPixels;
                    let width = (cover.width * ((100 - cover.spineWidth) / 200)) * (heightInPixels / cover.height); //
                    let spine = (cover.width * cover.spineWidth / 100) * (heightInPixels / cover.height);
                    return {
                        height,
                        width,
                        spine
                    }
                },
                bookContainerStyle(cover) {
                    let sizes = this.sizes(cover, this.heightInPixels)
                    return `width: ${sizes.width}px;
                    height: ${sizes.height}px;
                    perspective: ${sizes.height * 2}px;
                    margin: 0 auto;
                    position:relative;`;
                },
                book3dStyle(cover) {
                    let sizes = this.sizes(cover, this.heightInPixels)
                    return `width: 100%;
                    height: 100%;
                    position: relative;
                    transform-style: preserve-3d;
                    transform: translateZ(0) rotateY(${this.yRotation}deg) rotateX(${this.xRotation}deg) rotateZ(${this.zRotation}deg);`
                },
                book3dCoverStyle(cover) {
                    let sizes = this.sizes(cover, this.heightInPixels)
                    return `width: 100%; height: 100%;
                    background-image: url('/api/books/coverart/${this.bookId}/2?t=0');
                    background-size:cover;
                    background-position: right;
                    transform: rotateY(0deg) translateZ(${sizes.spine / 2}px);${this.yRotation >=90 ? '_box-shadow: black 0 10vmin 20vmin' : ''}`
                },
                book3dBackStyle(cover) {
                    let sizes = this.sizes(cover, this.heightInPixels)
                    return `width: 100%; height: 100%;
                    background-image: url('/api/books/coverart/${this.bookId}/2?t=0');
                    background-size:cover;
                    background-position: left;
                    transform: rotateY(180deg) translateZ(${sizes.spine / 2}px);${this.yRotation < 90 ? '_box-shadow: black 0 10vmin 20vmin' : ''}`;
                },
                book3dSpineStyle(cover) {
                    let sizes = this.sizes(cover, this.heightInPixels)
                    return `width: ${sizes.spine}px;
                    height: 100%;
                    background-image: url('/api/books/coverart/${this.bookId}/2?t=0');
                    background-size:cover;
                    background-position:center;
                    transform: rotateY(-90deg) translateZ(${sizes.spine / 2}px);`;
                },
                book3dEdgeStyle(cover) {
                    let sizes = this.sizes(cover, this.heightInPixels)
                    return `width: ${sizes.spine}px;
                    height: 100%;
                    background: whitesmoke;
                    transform: rotateY(90deg) translateZ(${sizes.width - sizes.spine / 2}px);
                    _box-shadow: black 0 10vmin 20vmin;`;
                },
                book3dTopStyle(cover) {
                    let sizes = this.sizes(cover, this.heightInPixels)
                    return `width: 100%;
                    height: ${sizes.spine}px;
                    background: whitesmoke;
                    transform: rotateX(90deg) translateZ(${sizes.spine / 2}px);`;
                },
                book3dBottomStyle(cover) {
                    let sizes = this.sizes(cover, this.heightInPixels)
                    return `width: 100%;
                    height: ${sizes.spine}px;
                    background: whitesmoke;
                    transform: rotateX(-90deg) translateZ(${sizes.height - sizes.spine / 2}px);`;
                }
            }
        });
    </script>
</body>
</html>
